// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              Int    @id @default(autoincrement())
  email           String @unique
  password        String
  profile_picture String  @default("default_profile")
  daily_streak    Int     @default(0)
  points          Int     @default(0)

  badges           UserBadge[]
  coursesCompleted CoursesCompleted[]
  dailyChallenges  DailyChallengesCompleted[]
}

model CoralInfo {
  id           Int      @id @default(autoincrement())
  name         String
  genus        String
  main_image   String
  gallery_urls String[]
  id_tips      String
  fun_fact     String
  distribution String
}

model Badge {
  id          Int         @id @default(autoincrement())
  name        String
  image       String
  description String
  criteria    String
  UserBadge   UserBadge[]
}

model UserBadge {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  badge   Badge @relation(fields: [badgeId], references: [id])
  badgeId Int

  earned_at DateTime @default(now())

  @@unique([userId, badgeId]) // prevent duplicate badge assignment
}

model DailyChallenge {
  id          Int      @id @default(autoincrement())
  name        String
  points      Int
  time_limit  Int
  description String
  created_at  DateTime @default(now())

  completions DailyChallengesCompleted[]
}

model Course {
  id               Int                @id @default(autoincrement())
  name             String
  points           Int
  time_limit       Int
  description      String
  genus            String
  questions        Question[]         @relation("CourseQuestions") // many-to-many
  CoursesCompleted CoursesCompleted[]
}

model Question {
  id      Int      @id @default(autoincrement())
  header  String
  answer  String
  image   String
  options String[]
  courses Course[] @relation("CourseQuestions") // many-to-many
}

model CoursesCompleted {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  course   Course @relation(fields: [courseId], references: [id])
  courseId Int

  completed_at DateTime @default(now())

  @@unique([userId, courseId])
}

model DailyChallengesCompleted {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  daily_challenge   DailyChallenge @relation(fields: [daily_challengeId], references: [id])
  daily_challengeId Int

  completed_at DateTime @default(now())

  @@unique([userId, daily_challengeId])
}
